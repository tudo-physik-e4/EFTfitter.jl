var documenterSearchIndex = {"docs":
[{"location":"api/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"DocTestSetup  = quote\n    using EFTfitter\nend","category":"page"},{"location":"api/#Types-1","page":"API","title":"Types","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Order = [:type, :constant]","category":"page"},{"location":"api/#Functions-1","page":"API","title":"Functions","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Order = [:macro, :function]","category":"page"},{"location":"api/#Documentation-1","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Modules = [EFTfitter]\nOrder = [:type, :constant, :macro, :function]","category":"page"},{"location":"api/#EFTfitter.Correlation","page":"API","title":"EFTfitter.Correlation","text":"struct Correlation\n\nFields:  \n\nmatrix::Array{Float64, 2}: Observables that are measured.  \nactive::Bool: Use this uncertainty category in fit. Defaults to true.  \n\nConstructors:\n\nCorrelation(matrix::Array{<:Real, 2}; active::Bool = true)\n\n\n\n\n\n","category":"type"},{"location":"api/#EFTfitter.EFTfitterModel","page":"API","title":"EFTfitter.EFTfitterModel","text":"struct EFTfitterModel\n\nThis is the central type for using EFTfitter. It comprises all information necessary for performing an analysis. Only active Measurement and Correlation objects will be considered.\n\nFields:  \n\nparameters::BAT.NamedTupleDist\nmeasurements::NamedTuple{<:Any, <:Tuple{Vararg{Measurement}}}\nmeasurementdistributions::NamedTuple{<:Any, <:Tuple{Vararg{MeasurementDistribution}}}\ncorrelations::NamedTuple{<:Any, <:Tuple{Vararg{Correlation}}}\nnuisances::Union{NamedTuple{<:Any, <:Tuple{Vararg{NuisanceCorrelation}}}, Nothing}\n\nConstructors:\n\nEFTfitterModel(\n    parameters::BAT.NamedTupleDist,\n    measurements::NamedTuple{<:Any, <:Tuple{Vararg{AbstractMeasurement}}},\n    correlations::NamedTuple{<:Any, <:Tuple{Vararg{AbstractCorrelation}}},\n    nuisances::Union{NamedTuple{<:Any, <:Tuple{Vararg{NuisanceCorrelation}}}, Nothing} = nothing\n)\n\nExamples:\n\nmodel = EFTfitterModel(parameters, measurements, correlations) # no nuisance correlations\n\nmodel = EFTfitterModel(parameters, measurements, correlations, nuisances) # with nuisance correlations\n)\n\n\n\n\n\n","category":"type"},{"location":"api/#EFTfitter.HighestDensityRegion","page":"API","title":"EFTfitter.HighestDensityRegion","text":"struct HighestDensityRegion <: AbstractRankingCriterion\n\nType for specifying the ranking criterion to be the area of the two-dimensional  marginal posterior region containing a probability mass p for two certain parameters.\n\nFields:  \n\nkeys::NTuple{2, Symbol}: Names of the parameters that are used for the marginalized regions.\np::Float64 = 0.9: Probability mass to be enclosed in the smallest interval.\nbins::T = 200: Number of bins for the histograms to calculate interval widths. \n\nConstructors:\n\nHighestDensityRegion(keys::NTuple{2, Symbol}, p=0.9, bins=200)\n\n\n\n\n\n","category":"type"},{"location":"api/#EFTfitter.Measurement","page":"API","title":"EFTfitter.Measurement","text":"struct Measurement\n\nFields:  \n\nobservable::Observable: Observable that is measured.  \nvalue::Float64;: Measured value.   \nuncertainties::NamedTuple{<:Any, <:Tuple{Vararg{Real}}}: Uncertainties of the measurement as NamedTuple.  \nactive::Bool: Use or exclude measurement in fit. Defaults to true.   \n\nConstructors:\n\nMeasurement(\n    observable::Observable,\n    value::Float64;\n    uncertainties::NamedTuple{<:Any, <:Tuple{Vararg{Real}}},\n    active::Bool = true\n)\n\nMeasurement(\n    observable::Function,\n    value::Float64;\n    uncertainties::NamedTuple{<:Any, <:Tuple{Vararg{Real}}},\n    active::Bool = true\n)\n\n\n\n\n\n","category":"type"},{"location":"api/#EFTfitter.MeasurementDistribution","page":"API","title":"EFTfitter.MeasurementDistribution","text":"struct MeasurementDistribution\n\nFields:       * observable::Array{Observable, 1}: Observables that are measured.     * value::Array{Float64, 1}: Measured values.     * uncertainties::NamedTuple{<:Any, <:Tuple{Vararg{Array{Float64, 1}}}}: Uncertainties of the measurement as NamedTuple.     * active::Array{Bool, 1}: Use or exclude bins in fit. Defaults to true for all bins.     * bin_names::Array{Symbol, 1}: Suffixes that will be appended to the name of the measurement distribution for the individual bins. Defaults to [_bin1, _bin2, ...].\n\nConstructors:  \n\nMeasurementDistribution(\n    observable::Array{Observable, 1},\n    vals::Array{<:Real, 1};\n    uncertainties::NamedTuple{<:Any, <:Tuple{Vararg{Union{Vector{Float64}, Vector{Int64}}}}},\n    active::Union{Bool, Array{Bool, 1}} = [true for i in 1:length(vals)],\n    bin_names::Array{Symbol, 1} = [Symbol(\"bin$i\") for i in 1:length(vals)]\n)\n\nMeasurementDistribution(\n    observable::Array{Function, 1},\n    vals::Array{<:Real, 1};\n    uncertainties::NamedTuple{<:Any, <:Tuple{Vararg{Union{Vector{Float64}, Vector{Int64}}}}},\n    active::Union{Bool, Array{Bool, 1}} = [true for i in 1:length(vals)],\n    bin_names::Array{Symbol, 1}\n)\n\n\n\n\n\n","category":"type"},{"location":"api/#EFTfitter.NuisanceCorrelation","page":"API","title":"EFTfitter.NuisanceCorrelation","text":"struct NuisanceCorrelation\n\nFields:  \n\nunc_key::Symbol: Name of uncertainty category.  \nmeas1::Symbol: Name of first measurement.  \nmeas2::Symbol: Name of second measurement.\nprior::Distribution: Prior distribution. Accepts the type Distribution and all other                types accepted by BAT.NamedTupleDist, e.g. Interval or Real.\n\nConstructors:  \n\nNuisanceCorrelation(unc_key::Symbol, meas1::Symbol, meas2::Symbol, prior::Any)\n\n\n\n\n\n","category":"type"},{"location":"api/#EFTfitter.Observable","page":"API","title":"EFTfitter.Observable","text":"struct Observable\n\nFields:  \n\nfunc::Function: Function returning the predicted value of the observable as a function of the parameters\nmin::Float64: Minimum boundary for values of the observable. Defaults to -Inf.  \nmax::Float64: Maximum boundary for values of the observable. Defaults to Inf.  \n\nConstructors:\n\nObservable(\n    func::Function;\n    min::Float64 = -Inf\n    max::Float64 = Inf\n)\n\n\n\n\n\n","category":"type"},{"location":"api/#EFTfitter.SmallestInterval","page":"API","title":"EFTfitter.SmallestInterval","text":"struct SmallestInterval <: AbstractRankingCriterion\n\nType for specifying the ranking criterion to be the total width of the one-dimensional marginalized smallest interval containing a probability mass p for a certain parameter.\n\nFields:  \n\nkey::Symbol: Name of the parameter that is used for the marginalized intervals.\np::Float64 = 0.9: Probability mass to be enclosed in the smallest interval.\n\nConstructors:\n\nSmallestInterval(key::Symbol, p=0.9, bins=200)\n\n\n\n\n\n","category":"type"},{"location":"api/#EFTfitter.SumOfSmallestIntervals","page":"API","title":"EFTfitter.SumOfSmallestIntervals","text":"struct SumOfSmallestIntervals <: AbstractRankingCriterion\n\nType for specifying the ranking criterion to be the summed width of all  one-dimensional marginalized smallest intervals containing a probability mass p.\n\nFields:  \n\np::Float64 = 0.9: Probability mass to be enclosed in the smallest intervals.\nbins::T = 200: Number of bins for the histograms to calculate interval widths. \n\nConstructors:\n\nSumOfSmallestIntervals(p=0.9, bins=200)\n\n\n\n\n\n","category":"type"},{"location":"api/#EFTfitter.BLUE-Tuple{EFTfitterModel}","page":"API","title":"EFTfitter.BLUE","text":"BLUE(model::EFTfitterModel)\n\nCalculates the best linear unbiased estimator (BLUE) for multiple  measurements of the same observable, according to https://www.sciencedirect.com/science/article/pii/0168900288900186.\n\nNote: Works only for an EFTfitterModel where all measurements have the same observable. If this is not the case, an error is thrown.\n\nReturns a NamedTuple with the fields:\n\n:value: BLUE value\n:unc: BLUE uncertainty\n:weights: Array with the weights for each measurement\n\nExample:\n\nblue = BLUE(model)\nprintln(blue.value, blue.unc, blue.weights)\n\n\n\n\n\n","category":"method"},{"location":"api/#EFTfitter.cov_to_cor-Tuple{Array{var\"#s52\",2} where var\"#s52\"<:Real}","page":"API","title":"EFTfitter.cov_to_cor","text":"cov_to_cor(cov::Array{<:Real, 2})\n\nConvert a covariance matrix cov to a correlation matrix and a vector of uncertainty values.\n\nReturns a matrix and a vector. Throws a warning when the covariance matrix is not positive definite.\n\nExample:\n\ncor, unc = cov_to_cor(cov)\n\n\n\n\n\n","category":"method"},{"location":"api/#EFTfitter.get_correlations-Tuple{EFTfitterModel}","page":"API","title":"EFTfitter.get_correlations","text":"get_correlations(m::EFTfitterModel)\n\nReturns a NamedTuple with the Correlationss in the EFTfitterModel.\n\n\n\n\n\n","category":"method"},{"location":"api/#EFTfitter.get_measurement_distributions-Tuple{EFTfitterModel}","page":"API","title":"EFTfitter.get_measurement_distributions","text":"get_measurement_distributions(m::EFTfitterModel)\n\nReturns a NamedTuple with the MeasurementDistributions in the EFTfitterModel.\n\n\n\n\n\n","category":"method"},{"location":"api/#EFTfitter.get_measurements-Tuple{EFTfitterModel}","page":"API","title":"EFTfitter.get_measurements","text":"get_measurements(m::EFTfitterModel)\n\nReturns a NamedTuple with the Measurements in the EFTfitterModel.\n\n\n\n\n\n","category":"method"},{"location":"api/#EFTfitter.get_nuisance_correlations-Tuple{EFTfitterModel}","page":"API","title":"EFTfitter.get_nuisance_correlations","text":"get_nuisance_correlations(m::EFTfitterModel)\n\nReturns a NamedTuple with the NuisanceCorrelations in the EFTfitterModel.\n\n\n\n\n\n","category":"method"},{"location":"api/#EFTfitter.get_observables-Tuple{EFTfitterModel}","page":"API","title":"EFTfitter.get_observables","text":"get_observables(m::EFTfitterModel)\n\nReturns a NamedTuple with the Observables in the EFTfitterModel. Note: The upper and lower limits are ignored and for each unique Functions only one Observable is returned.\n\n\n\n\n\n","category":"method"},{"location":"api/#EFTfitter.get_parameters-Tuple{EFTfitterModel}","page":"API","title":"EFTfitter.get_parameters","text":"get_parameters(m::EFTfitterModel)\n\nReturns model parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#EFTfitter.get_smallest_interval_edges-Tuple{StructArrays.StructArray{BAT.DensitySample{P,T,W,R,Q},1,NamedTuple{(:v, :logd, :weight, :info, :aux),Tuple{PV,TV,WV,RV,QV}},I} where I where QV<:AbstractArray{Q,1} where RV<:AbstractArray{R,1} where WV<:AbstractArray{W,1} where TV<:AbstractArray{T,1} where PV<:AbstractArray{P,1} where Q where R where W<:Real where T<:AbstractFloat where P,Union{Real, Symbol},Real}","page":"API","title":"EFTfitter.get_smallest_interval_edges","text":"get_smallest_interval_edges(\n    samples::DensitySampleVector, \n    key::Union{Symbol, Real}, \n    p::Real; \n    bins=200,\n    atol=0.0)\n\nCalculates the edges of the smallest intervals containing the fraction p of the probability of the marginal distribution of parameter key.\n\nReturns a NamedTuple with the keys lower and upper which both contain Vectors with the corresponding bin edges. Keywords:\n\nbins=200: The number of bins used fpr calculating the intervals and edges.\natol=0.0: Intervals are joined together when they are seperated by less than this value.\n\n\n\n\n\n","category":"method"},{"location":"api/#EFTfitter.to_correlation_matrix-Tuple{NamedTuple{var\"#s45\",var\"#s44\"} where var\"#s44\"<:Tuple{Vararg{EFTfitter.AbstractMeasurement,N} where N} where var\"#s45\",Vararg{Any,N} where N}","page":"API","title":"EFTfitter.to_correlation_matrix","text":"to_correlation_matrix(\n    measurements::NamedTuple{<:Any, <:Tuple{Vararg{AbstractMeasurement}}},\n    correlations::Tuple{Symbol,Symbol, Union{<:Real, Array{<:Real, 2}}}...\n)\n\nReturns a `Matrix{Float64}` as the correlation matrix for the measurements with all diagonal-elements being unity.\nThe correlations are specified by passing tuples of two `Symbols` (the keys of the `Measurements`) with a value or matrix for the correlation coefficients.\nIf the matrix is not positive-definite, a warning is shown but the matrix is still returned.\n\nExample:\n```julia\ndist_corr = [1.0 0.5 0.0;\n             0.5 1.0 0.0;\n             0.0 0.0 1.0]\n\nanother_corr_matrix = to_correlation_matrix(\n    measurements,\n    (:Meas1, :Meas2, 0.4), \n    (:Meas1, :MeasDist, 0.1), \n    (:MeasDist, :MeasDist, dist_corr), \n    (:MeasDist_bin2, :MeasDist_bin3, 0.3),\n)\n```\n\n\n\n\n\n","category":"method"},{"location":"api/#EFTfitter.MeasurementRanks","page":"API","title":"EFTfitter.MeasurementRanks","text":"struct MeasurementRanks\n\nType for the results of the measurement ranking.\n\nFields:  \n\nnames::Vector{Symbol}: Names of the measurements.\nvalues::Vector{Float64}: Values of the ranking, calculated according to the criterion.\ncriterion<:AbstractRankingCriterion: Criterion that was used for ranking.\n\nConstructors:\n\nfunction MeasurementRanks(\n    names::Vector{Symbol}, \n    values::Vector{Float64}, \n    criterion::AbstractRankingCriterion;\n    order::Symbol = :values,\n    rev::Bool = false\n)\n\nKeyword arguments:\n\norder::Symbol = :values: Specifies how the names and values are sorted. Further options are \n\n:names for alphabetical sorting based on the measurement names or :none for keeping the initial order of measurements. \n\nrev::Bool=false: Switch to invert the order.\n\n\n\n\n\n","category":"type"},{"location":"api/#EFTfitter.UncertaintyRanks","page":"API","title":"EFTfitter.UncertaintyRanks","text":"struct UncertaintyRanks\n\nType for the results of the unceertainty ranking.\n\nFields:  \n\nnames::Vector{Symbol}: Names of the uncertainty categories.\nvalues::Vector{Float64}: Values of the ranking, calculated according to the criterion.\ncriterion<:AbstractRankingCriterion: Criterion that was used for ranking.\n\nConstructors:\n\nfunction UncertaintyRanks(\n    names::Vector{Symbol}, \n    values::Vector{Float64}, \n    criterion::AbstractRankingCriterion;\n    order::Symbol = :values,\n    rev::Bool = false\n)\n\nKeyword arguments:\n\norder::Symbol = :values: Specifies how the names and values are sorted. Further options are \n\n:names for alphabetical sorting based on the uncertainty names or :none for keeping the initial order of uncertainty categories. \n\nrev::Bool=false: Switch to invert the order.\n\n\n\n\n\n","category":"type"},{"location":"api/#EFTfitter.apply_criterion-Tuple{SumOfSmallestIntervals,StructArrays.StructArray{BAT.DensitySample{P,T,W,R,Q},1,NamedTuple{(:v, :logd, :weight, :info, :aux),Tuple{PV,TV,WV,RV,QV}},I} where I where QV<:AbstractArray{Q,1} where RV<:AbstractArray{R,1} where WV<:AbstractArray{W,1} where TV<:AbstractArray{T,1} where PV<:AbstractArray{P,1} where Q where R where W<:Real where T<:AbstractFloat where P}","page":"API","title":"EFTfitter.apply_criterion","text":"apply_criterion(criterion<:AbstractRankingCriterion, samples::DensitySampleVector)\n\nApplies the criterion to the samples and returns the corresponding value.\n\nAvailable ranking criteria:\n\nSumOfSmallestIntervals(p=0.9): summed width of all one-dimensional marginalized smallest intervals containing p=90% of the posterior probability\nSmallestInterval(key=:C1, p=0.9): width of the one-dimensional marginalized smallest interval of parameter :C1 containing p=90% of the posterior probability.\n`HighestDensityRegion(keys::NTuple{2, Symbol}, p=0.9, bins=200): volume of the highest density regione\n\n\n\n\n\n","category":"method"},{"location":"api/#EFTfitter.criterion_value-Tuple{EFTfitter.AbstractRankingCriterion,EFTfitterModel}","page":"API","title":"EFTfitter.criterion_value","text":"function criterion_value(\n    criterion::AbstractRankingCriterion,\n    model::EFTfitterModel;\n    sampling_algorithm::BAT.AbstractSamplingAlgorithm=MCMCSampling()\n)\n\nComputes the value of the criterion for the model using the sampling_algorithm.\n\nAvailable ranking criteria:\n\nSmallestIntervalsSum(p=0.9): summed width of all one-dimensional marginalized smallest intervals containing p=90% of the posterior probability\nSmallestInterval(key=:C1, p=0.9): width of the one-dimensional marginalized smallest interval of parameter key=:C1 containing p=90% of the posterior probability\n\n\n\n\n\n","category":"method"},{"location":"api/#EFTfitter.measurement_models-Tuple{EFTfitterModel}","page":"API","title":"EFTfitter.measurement_models","text":"function measurement_models(model::EFTfitterModel)\n\nCreates a Vector of EFTfitterModel where always one of the initially active measurements is deactivated at a time. Returns a Vector of EFTfitterModel and a Vector of Symbol with the names of the currently deactivated measurement.\n\n\n\n\n\n","category":"method"},{"location":"api/#EFTfitter.rank_measurements-Tuple{EFTfitterModel}","page":"API","title":"EFTfitter.rank_measurements","text":"rank_measurements(\n    model::EFTfitterModel;\n    sampling_algorithm::BAT.AbstractSamplingAlgorithm = MCMCSampling(),\n    criterion = SmallestIntervalsSum(p=0.9),\n    order = :values,\n    rev = true\n)\n\nComputes a ranking of the individual measurement in the EFTfitterModel based on a certain ranking criterion by performing the sampling according to the specified sampling_algorithm. Returns a MeasurementRank object.\n\nBy default, the summed width of all one-dimensional marginalized smallest intervals containing 90% of the posterior probability is used as the ranking criterion.  The measurements are ranked by the relative increase of this value.\n\nAvailable ranking criteria:\n\nSmallestIntervalsSum(p=0.9): summed width of all one-dimensional marginalized smallest intervals containing p=90% of the posterior probability\nSmallestInterval(key=:C1, p=0.9): width of the one-dimensional marginalized smallest interval of parameter :C1 containing p=90% of the posterior probability.\n\n\n\n\n\n","category":"method"},{"location":"api/#EFTfitter.rank_uncertainties-Tuple{EFTfitterModel}","page":"API","title":"EFTfitter.rank_uncertainties","text":"rank_uncertainties(\n    model::EFTfitterModel;\n    sampling_algorithm::BAT.AbstractSamplingAlgorithm = MCMCSampling(),\n    criterion = SmallestIntervalsSum(p=0.9),\n    order = :values,\n    rev = true\n)\n\nComputes a ranking of the types of uncertainty in the EFTfitterModel based on a certain ranking criterion by performing the sampling according to the specified sampling_algorithm. Returns a MeasurementRank object.\n\nBy default, the summed width of all one-dimensional marginalized smallest intervals containing 90% of the posterior probability is used as the ranking criterion.  The uncertainty types are ranked by the relative decrease of this value.\n\nAvailable ranking criteria:\n\nSmallestIntervalsSum(p=0.9): summed width of all one-dimensional marginalized smallest intervals containing p=90% of the posterior probability\nSmallestInterval(key=:C1, p=0.9): width of the one-dimensional marginalized smallest interval of parameter key=:C1 containing p=90% of the posterior probability\n\n\n\n\n\n","category":"method"},{"location":"api/#EFTfitter.uncertainty_models-Tuple{EFTfitterModel}","page":"API","title":"EFTfitter.uncertainty_models","text":"function uncertainty_models(model::EFTfitterModel)\n\nCreates a Vector of EFTfitterModel where always one of the initially active uncertainty types is deactivated at a time. Returns a Vector of EFTfitterModel and a Vector of Symbol with the names of the currently deactivated uncertainty types.\n\n\n\n\n\n","category":"method"},{"location":"BLUE/#EFTfitter.jl-BLUE-Example-1","page":"BLUE Example","title":"EFTfitter.jl - BLUE Example","text":"","category":"section"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"When using multiple measurements of a single observable and a uniform prior for the parameter representing the combined value, the combination of measurements performed with EFTfitter.jl yields the same results as the Best Linear Unbiased Estimator (BLUE) method.","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"Here, we demonstrate this by using the examples of the paper \"How to combine correlated estimates of a single physical quantity\" by L. Lyons, D. Gibaut and P. Clifford (https://www.sciencedirect.com/science/article/pii/0168900288900186). All numbers are taken from the example on charm particle lifetime experiments in section 5. A factor of 10^13 is applied for convenience.","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"using EFTfitter\nusing BAT\nusing IntervalSets\nusing Statistics\nusing StatsBase\nusing LinearAlgebra\nusing Plots","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"We need one parameter for the best estimator and choose a uniform distribution in the range 8 to 14 as prior:","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"parameters = BAT.NamedTupleDist(\n    τ = 8..14,\n)","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"When combining multiple measurements of the same observable, only a function returning the combination parameter is needed:","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"estimator(params) = params.τ","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"In Eq. (17') of the reference paper the following covariance matrix is given:","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"covariance = [2.74 1.15 0.86 1.31;\n              1.15 1.67 0.82 1.32;\n              0.86 0.82 2.12 1.05;\n              1.31 1.32 1.05 2.93]","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"For using this in EFTfitter.jl, we first need to convert the covariance matrix into a correlation matrix and the corresponding uncertainty values:","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"corr, unc = EFTfitter.cov_to_cor(covariance)\n\nmeasurements = (\n    τ1 = Measurement(estimator,  9.5, uncertainties = (stat=unc[1],) ),\n    τ2 = Measurement(estimator, 11.9, uncertainties = (stat=unc[2],) ),\n    τ3 = Measurement(estimator, 11.1, uncertainties = (stat=unc[3],) ),\n    τ4 = Measurement(estimator,  8.9, uncertainties = (stat=unc[4],) ),\n)\n\ncorrelations = (\n    stat = Correlation(corr),\n)","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"construct an EFTfitterModel:","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"model = EFTfitterModel(parameters, measurements, correlations)\nposterior = PosteriorDensity(model);","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"sample the posterior with BAT.jl:","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"algorithm = MCMCSampling(mcalg =MetropolisHastings(), nsteps = 10^6, nchains = 4)\nsamples = bat_sample(posterior, algorithm).result","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"plot the posterior distribution for the combination parameter τ:","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"plot(samples, :τ, mean=true)","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"(Image: blue plots)","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"print numerical results of combination:","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"println(\"Mode: $(mode(samples).τ)\")\nprintln(\"Mean: $(mean(samples).τ) ± $(std(samples).τ)\")","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"Mode: 11.15985 Mean: 11.15471 ± 0.80180","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"","category":"page"},{"location":"BLUE/#Comparison-with-BLUE-method-1","page":"BLUE Example","title":"Comparison with BLUE method","text":"","category":"section"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"blue = BLUE(model)\nprintln(\"BLUE: $(blue.value) ± $(blue.unc)\")\nprintln(\"BLUE weights: $(blue.weights)\")","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"BLUE: 11.15983 ± 1.28604 BLUE weights: [0.145, 0.470, 0.347, 0.038]","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"","category":"page"},{"location":"BLUE/#","page":"BLUE Example","title":"BLUE Example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"LICENSE/#LICENSE-1","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/#","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"advanced_tutorial/#EFTfitter.jl-Advanced-Tutorial-1","page":"Advanced Tutorial","title":"EFTfitter.jl - Advanced Tutorial","text":"","category":"section"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"Table of contents:","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"Pages = [\"advanced_tutorial.md\"]\nDepth = 3","category":"page"},{"location":"advanced_tutorial/#Vector-of-functions-for-a-MeasurementDistribution-1","page":"Advanced Tutorial","title":"Vector of functions for a MeasurementDistribution","text":"","category":"section"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"When using distributions of measurements, a vector of functions with the predictions for the observable needs to be passed containing a function for each of the bins which have only the model parameters as their argument. Defining a separate function for each bin can, however, become tedious for a large number of bins, especially since typically the bins of a distribution have a similar functional dependence on the model parameters and only differ in some coefficients. In such cases, it is possible to use Julia's metaprogramming features to create the vector of functions. The distribution in our basic tutorial has been defined by implementing three functions that all call the same function myfunc but with different values for the coefficients The same result can also be achieved like this:","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"function get_coeffs(i) # return the coefficients for bin i\n    coeffs = [[2.2, 5.5, 6.6], [2.2, 5.5, 6.6], [2.2, 5.5, 6.6]]\n    return coeffs[i]\nend\n\nfunction my_dist_func(params, i)\n    coeffs = get_coeffs(i)\n    return coeffs[1] * params.C1 + coeffs[2] * params.C1 * params.C2+ coeffs[3] * params.C2\nend","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"create an array of Functions with names diff_xsec_binX:","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"diff_xsec=Function[]\nfor i in 1:3\n    @eval begin\n        function $(Symbol(\"diff_xsec_bin$i\"))(params)\n            return my_dist_func(params, $i)\n        end\n        push!(diff_xsec, $(Symbol(\"diff_xsec_bin$i\")))\n    end\nend","category":"page"},{"location":"advanced_tutorial/#Using-covariance-matrices-1","page":"Advanced Tutorial","title":"Using covariance matrices","text":"","category":"section"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"Information about the uncertainties of measurements need to be provided to EFTfitter.jl in terms of the uncertainty values and corresponding correlation matrices. If you have these information in terms of covariance matrices, you need to convert it to correlation matrices and uncertainty values before. The function cov_to_cor can be used for this:","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"cov_syst = [3.24   0.81   0.378  0.324  0.468;\n            0.81   0.81   0.126  0.162  0.234;\n            0.378  0.126  0.49   0.126  0.182;\n            0.324  0.162  0.126  0.81   0.234;\n            0.468  0.234  0.182  0.234  1.69]\n\ncor_syst, unc_syst = cov_to_cor(cov_syst)","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"measurements = (\n\n    Meas1 = Measurement(xsec1, 21.6,\n            uncertainties = (stat=0.8, syst=unc_syst[1], another_unc=2.3)),\n\n    Meas2 = Measurement(Observable(xsec2, min=0), 1.9,\n            uncertainties = (stat=0.6, syst=unc_syst[2], another_unc=1.1), active=true),\n\n\n    MeasDist = MeasurementDistribution(diff_xsec, [1.9, 2.93, 4.4],\n                uncertainties = (stat = [0.7, 1.1, 1.2], syst= unc_syst[3:5], another_unc = [1.0, 1.2, 1.9]),\n                active=[true, false, true]),\n)","category":"page"},{"location":"advanced_tutorial/#Nuisance-Correlations-1","page":"Advanced Tutorial","title":"Nuisance Correlations","text":"","category":"section"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"When performing an analysis with unknown correlation coefficients, it is possible to treat them as nuisance parameters in the fit. For this, we define a further NamedTuple consisting of NuisanceCorrelation objects:","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"nuisance_correlations = (\n    ρ1  = NuisanceCorrelation(:syst, :Meas1, :Meas2, -1..1),\n    ρ2  = NuisanceCorrelation(:syst, :MeasDist_bin1, :MeasDist_bin3, truncated(Normal(0.5, 0.1), -1, 1)),\n)","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"In the NuisanceCorrelation object we specify the name of the uncertainty type, the names of the two measurements we want to correlate using the nuisance correlations and a prior for the nuisance parameter. Note that the nuisance parameters should only be varied in the interval (-1, 1) as they represent correlation coefficients. For ρ1 we choose a flat prior between -1 and 1. For ρ2 we have some expectations and formulate them using a Gaussian prior with μ=0.5 and σ=0.1. However, to ensure that ρ2 is only varied in the allowed region of (-1, 1), we truncate the normal distribution accordingly.","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"We need to modify the definition of the EFTfitterModel by also passing the nuisance_correlations:","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"model = EFTfitterModel(parameters, measurements, correlations, nuisance_correlations)\n\n\nsavefig(p, \"plot.pdf\")","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"(Image: plot with nuisances)","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"warning: Warning\nWhen using nuisance correlations, it may happen that the fit does not converge anymore. This happens mainly when the correlation values are close to -1 or +1. In such a case, you can try to reduce the allowed ranges in the priors for the Nuisance correlations to investigate at which values this happens.","category":"page"},{"location":"advanced_tutorial/#Ranking-of-measurements-and-uncertainties-1","page":"Advanced Tutorial","title":"Ranking of measurements and uncertainties","text":"","category":"section"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"With the rank_measurements and rank_uncertainties functions, the influence of the individual measurements or uncertainty types on the result of a fit can be estimated. For the ranking, each active measurement (respectively uncertainty type) is deactivated at a time and the fit is repeated. The results of the fits with a deactivated measurement (or uncertainty type) are then compared to the fit result with all measurements (uncertainty types) activated. A ranking is calculated based on a ranking criterion calculated from the posterior distributions of these fits.","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"The default ranking criterion is the relative increase of the total width of the smallest interval containing 90% of the posterior probability when deactivating a measurement. For models with more than one parameter, the sum of the relative increases of all one-dimensional smallest intervals is used, i.e. SumOfSmallestIntervals(p=0.9, bins=200).","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"measurement_ranking = EFTfitter.rank_measurements(model)","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"The sampling algorithm to be used can be passed with the keyword sampling_algorithm. By default, BAT.MCMCSampling() is used, i.e. Metropolis-Hastings with 4 chains and 100000 steps.","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"plot(measurement_ranking, title = \"Ranking of measurements\")","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"(Image: measurement ranking)","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"For ranking the uncertainty types, the relative decrease is used.","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"uncertainty_ranking = EFTfitter.rank_uncertainties(model,\n    criterion = SumOfSmallestIntervals(p=0.9, bins=200),\n    sampling_algorithm = SobolSampler(nsamples = 10^5), order = :values)\n\nplot(uncertainty_ranking, title = \"Ranking of uncertainty types\")","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"(Image: measurement ranking) Please see the ranking documentation for further ranking criteria and keyword arguments.","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"","category":"page"},{"location":"advanced_tutorial/#","page":"Advanced Tutorial","title":"Advanced Tutorial","text":"This page was generated using Literate.jl.","category":"page"},{"location":"installation/#Installation-of-EFTfitter.jl-1","page":"Installation","title":"Installation of EFTfitter.jl","text":"","category":"section"},{"location":"installation/#","page":"Installation","title":"Installation","text":"EFTfitter.jl is written in the Julia programming language.  To use it, you need to install Julia itself, the EFTfitter.jl and BAT.jl Julia packages as well as a few additional Julia packages. ","category":"page"},{"location":"installation/#Installing-Julia-1","page":"Installation","title":"Installing Julia","text":"","category":"section"},{"location":"installation/#","page":"Installation","title":"Installation","text":"Julia is available for Linux, OS-X and Windows, and easy to install:","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"Download Julia.\nExtract the archive, resp. run the installer.\nYou may want to add the Julia bin directory to your $PATH. To get the location of the Julia bin directory on OS-X or Windows, start a Julia session (via applications menu) and run the Julia command Sys.BINDIR.","category":"page"},{"location":"installation/#Installing-EFTfitter.jl-1","page":"Installation","title":"Installing EFTfitter.jl","text":"","category":"section"},{"location":"installation/#","page":"Installation","title":"Installation","text":"EFTfitter.jl is a registered Julia package. To install it, simply run:","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"julia> using Pkg\njulia> pkg\"add EFTfitter\"","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"If you want to use the latest development version of BAT (main branch), instead of the latest stable release, use","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"julia> using Pkg\njulia> pkg\"add EFTfitter#main\"","category":"page"},{"location":"installation/#Installing-dependencies:-BAT.jl-and-further-Julia-packages-1","page":"Installation","title":"Installing dependencies: BAT.jl and further Julia packages","text":"","category":"section"},{"location":"installation/#","page":"Installation","title":"Installation","text":"BAT.jl (v.2.0) is required for EFTfitter. To install it, run:","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"julia> using Pkg\njulia> pkg\"add BAT\"","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"You will also need to install the following Julia packages to run the EFTfitter.jl examples:","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"julia> using Pkg\njulia> pkg\"add Distributions IntervalSets Plots ValueShapes StatsBase\"","category":"page"},{"location":"installation/#Further-information-1","page":"Installation","title":"Further information","text":"","category":"section"},{"location":"installation/#","page":"Installation","title":"Installation","text":"If you'd like to precompile all installed packages right aways (otherwise they'll get precompiled when loaded for the first time), run:","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"julia> pkg\"precompile\"","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"For further infortmation on how to set up Julia and BAT.jl see the installation guide of the BAT.jl documentation.","category":"page"},{"location":"#EFTfitter.jl-1","page":"Home","title":"EFTfitter.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"EFTfitter is a tool for constraining the parameters of physics models using Bayesian inference  by combining measurements of (different) observables.  It is particularly suited for EFT (effective field theory) models.\nThe Bayesian inference is performed using the Bayesian Analysis Toolkit - BAT.jl.\nA detailed explanation of the EFTfitter approach can be found in the EFTfitter paper. ","category":"page"},{"location":"#","page":"Home","title":"Home","text":"EFTfitter.jl is a new implementation of the previous C++ version of EFTfitter.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Work in progress: Interfaces and functions might be subject to changes.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Short-description-1","page":"Home","title":"Short description","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"For further information on the statistical approach see the EFTfitter paper.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Assumption: Measurements of physical quantities are approximately gaussian.    This allows to combine the measurements using the following likelihood:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"p(vecxvecy) = sum_i=1^nsum_j=1^n vecx - Uvecy_i mathcalM_ij^-1 vecx - Uvecy_j","category":"page"},{"location":"#","page":"Home","title":"Home","text":"where vecx is the vector of measurements with length n and vecy is the vector of predicitions for the values of the N observables.  The element U_ij of the (n x N)-matrix U is unity if x_i is a measurement of the observable y_j, and zero otherwise. The covariance matrix","category":"page"},{"location":"#","page":"Home","title":"Home","text":"mathcalM_ij = textcovx_i x_j = sum_k=1^M textcov^(k)x_i x_j","category":"page"},{"location":"#","page":"Home","title":"Home","text":"is the sum over the covariances of all k types of uncertainties.","category":"page"},{"location":"#Required-user-inputs-1","page":"Home","title":"Required user inputs","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Parameters: Model parameters to be fitted.\nObservables: Predictions for physical quantities as a function of the free model parameters.\nMeasurements: Measured values of the observables and uncertainty values for different types of uncertainties.\nCorrelations: Correlation matrices for the uncertainties.","category":"page"},{"location":"#Features-of-EFTfitter.jl-1","page":"Home","title":"Features of EFTfitter.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"combine multiple measurements of the same observable\ncombine measurements of different observables\nfit model parameters using Bayesian inference\ninclude (multiple categorizes of) uncertainties and correlations\nuse simple input formats for measurements, uncertainties & correlations\nrank the individual measurements and uncertainty types by their impact on the result of the combination\ntreat unknown correlation coefficients as nuisance parameters in the fit","category":"page"},{"location":"#Documentation-and-Tutorials-1","page":"Home","title":"Documentation & Tutorials","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Please see the Tutorial and Advanced Tutorial for detailed information on how to use EFTfitter.  Executable versions of the tutorials can be found here.    You can also try EFTfitter.jl right now at binder: (Image: badge)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"All functions and types are documented in the API Documentation.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Citing-EFTfitter-1","page":"Home","title":"Citing EFTfitter","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"When using EFTfitter.jl for your work, please consider citing:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Nuno Castro, Johannes Erdmann, Cornelius Grunwald, Kevin Kroeninger, Nils-Arne Rosien, EFTfitter - A tool for interpreting measurements in the context of effective field theories, Eur. Phys. J. C 76 (2016) 8, 432","category":"page"},{"location":"#","page":"Home","title":"Home","text":"@article{EFTfitter2016,\n    author = {Castro, Nuno and Erdmann, Johannes and Grunwald, Cornelius and Kr\\\"oninger, Kevin and Rosien, Nils-Arne},\n    title = \"{EFTfitter---A tool for interpreting measurements in the context of effective field theories}\",\n    eprint = \"1605.05585\",\n    archivePrefix = \"arXiv\",\n    primaryClass = \"hep-ex\",\n    doi = \"10.1140/epjc/s10052-016-4280-9\",\n    journal = \"Eur. Phys. J. C\",\n    volume = \"76\",\n    number = \"8\",\n    pages = \"432\",\n    year = \"2016\"\n}","category":"page"},{"location":"plotting/#EFTfitter.jl-Plotting-Tutorial-1","page":"Plotting","title":"EFTfitter.jl - Plotting Tutorial","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"EFTfitter includes several recipes for plotting its datatypes using Plots.jl","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"using EFTfitter\nusing BAT\nusing IntervalSets\nusing Distributions\nusing Plots","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"we use the inputs from the basic tutorial:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"include(\"tutorial_inputs.jl\")\nmodel = EFTfitterModel(parameters, measurements, correlations)\n\nposterior = PosteriorDensity(model)\nalgorithm = MCMCSampling(mcalg = MetropolisHastings(), nsteps = 10^5, nchains = 4)\nsamples = bat_sample(posterior, algorithm).result;","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"Note: All plots generated with the following plot recipes can be customized using the series attributes, axis attributes, subplot attributes and plot attributes","category":"page"},{"location":"plotting/#Plotting-Observables-1","page":"Plotting","title":"Plotting Observables","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"Plotting an Observable object:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot(Observable(xsec1), (C1=0, C2=-1:0.01:1))","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"When plotting an Observable from the EFTfitterModel, it can be accessed in different ways:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot(get_observables(model).xsec1, (C1=0, C2=-1:0.01:1))\n\nplot(get_measurements(model).Meas1.observable, (C1=0, C2=-1:0.01:1))","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: example plot)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"If the model has many parameters, it can be convenient to pass the paramter that should be plotted together with as a NamedTuple with default values for all parameters.","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"default_parameters = (C1=1, C2=0)\nplot(get_observables(model).xsec1, (C2=-1:0.01:1,), default_parameters)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: example plot)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"The second argument in this function overwrites the corresponding default parameters, so it is also possible to pass multiple parameters:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot(get_observables(model).xsec1, (C2=-1:0.01:1, C1=2.3), default_parameters)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: example plot)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"All observables of a model can easily be plotted in one plot:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"p = plot()\nfor meas in get_measurements(model)\n    p=plot!(meas.observable, (C1=0, C2=-1:0.01:1), ylabel=\"prediction\")\nend\np","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: example plot)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"When plotting observables, the default title contains the values of the fixed parameters. In case the title is too long for one line, linebreaks can be inserted using the keyword titlewidth. e.g.:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot(get_observables(model).xsec1, (C1=-10:0.01:10, C2=0, C3=100, C4=200), titlewidth=13)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: example plot)","category":"page"},{"location":"plotting/#Plotting-Measurements-1","page":"Plotting","title":"Plotting Measurements","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"Measurement objects can be plotted on top of the observables as a horizontal line with an uncertainty band:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot(get_measurements(model).Meas1.observable, (C1=0, C2=-0.2:0.01:0.2))\nplot!(measurements.Meas1)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: example plot)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"However, when plotting the measurements of the EFTfitterModel, the following syntax is preferred as it supports showing the names of the measurments in the legend:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot(get_measurements(model).Meas1.observable, (C1=0, C2=-0.2:0.01:0.2))\nplot!(get_measurements(model), :Meas1)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: example plot)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"The uncertainty typed to be plotted can be specified:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot(get_measurements(model).Meas1.observable, (C1=0, C2=-0.2:0.01:0.2))\nplot!(get_measurements(model), :Meas1, uncertainties=(:stat, :another_unc))","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: example plot)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"When mutliple types of uncertainties are given, the sum of the squares is used as the total uncertainty. By default, all uncertainties included in the EFTfitterModel are used.","category":"page"},{"location":"plotting/#Plotting-MeasurementDistributions-1","page":"Plotting","title":"Plotting MeasurementDistributions","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"MeasurementDistributions can be plotted for fixed parameters:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot(get_measurement_distributions(model).MeasDist.observable, (C1=1.2, C2=0))\nplot!(get_measurement_distributions(model), :MeasDist)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: example plot)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"alternative plotting style for measurement distributions:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot(get_measurement_distributions(model).MeasDist.observable, (C1=1.2, C2=0))\nplot!(get_measurement_distributions(model), :MeasDist, st=:scatter)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: example plot)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"Also for MeasurementDistributions the uncertainty types to be plotted can be specified. The names of the bins can be customized using the bin_names keyword.","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot(get_measurement_distributions(model).MeasDist.observable, (C1=1.2, C2=0))\nplot!(get_measurement_distributions(model), :MeasDist, st=:scatter, uncertainties=(:stat,), bin_names=(\"First bin\", \"Second bin\"))","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: example plot)","category":"page"},{"location":"plotting/#Plotting-1D-Intervals-1","page":"Plotting","title":"Plotting 1D Intervals","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"Default plot of the smallest 1D intervals containing 90% posterior probability:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot(samples, 0.9)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: example plot)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"Default settings for keywords:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot(samples, 0.9,\n    parameter_names = get_parameter_names(maybe_shaped_samples), # Array of String with the names of the parameters\n    y_positions = collect(1:length(parameter_names))*-1, # y-positions of the interval lines\n    y_offset = 0, # offest on the y-axis, helpful when plotting multiple samples on top of each other\n    bins = 200, # number of bins for calculating smallest intervals\n    atol = 0,) # merge intervals that are seperated less then atol (especially helpful when using a high number of bins)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"helpful keyword arguments:  msc = markerstrokecolor: color of the interval lines  msw = markerstrokewidth: linewidth  ms = markersize: size of caps","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"Customized 1D interval plot:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"p = plot(samples, 0.9, bins = 400, atol=0.01, y_offset=-0.1, label = \"Samples A\")\np = plot!(samples, 0.9, bins = 100, atol=0.05, y_offset=0.1, msw = 5, ms=8, msc=:red, label = \"Samples B\")","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: example plot)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tutorial/#EFTfitter.jl-Tutorial-1","page":"Tutorial","title":"EFTfitter.jl - Tutorial","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Table of contents:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Pages = [\"tutorial.md\"]\nDepth = 3","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"note: Note\nAn executable version of this tutorial can be found here. A template to help starting your own analysis is available here.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"It is recommended to store the inputs (i.e. parameters, observables, measurements and correlations) and the actual analysis in two separate files. This allows to simply load different configurations of the model. We will therefore also consider two files: tutorial_inputs.jl and runTutorial.jl.","category":"page"},{"location":"tutorial/#File-\"tutorial_inputs.jl\"-1","page":"Tutorial","title":"File \"tutorial_inputs.jl\"","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"We start by defining all neccesary inputs to create an EFTfitterModel.","category":"page"},{"location":"tutorial/#Parameters-1","page":"Tutorial","title":"Parameters","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"We specify the parameters our model depends on and choose a prior for each of the parameters. The prior has to be specified in form of a BAT.jl prior.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"For our example, we consider two parameters with the names C1 and C2. For C1 we choose a uniform (flat) prior in the range (-3, 3). For C2 we choose a gaussian prior with μ=0 and σ=0.5.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"parameters = BAT.NamedTupleDist(\n    C1 = -3..3, # short for: Uniform(-3, 3)\n    C2 = Normal(0, 0.5) # Normal distribution\n)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"A parameter can be fixed (and therefore excluded from the fit) by setting its prior to a certain value, e.g.: C2 = 0. Also see here for more information on priors in the BAT.jl documentation.","category":"page"},{"location":"tutorial/#Observables-1","page":"Tutorial","title":"Observables","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"We now proceed to implement Functions that specify how the predicted values of the observables depend on the model parameters. For each observable, we need to provide a Function that returns the predicted value of the observable for certain values of the model parameters. In our example, we consider two observables (e.g. cross sections) by defining the two functions xsec1 and xsec2.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Note: The functions for the observables may only have the model parameters as their only argument. You can, however define a function that only depends on the parameters and that internally calls a more complex function and passes the corresponding arguments. In this example, the function xsec2 calls the function myfunc and passes further arguments (coeffs).","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"function xsec1(params)\n    c = [20.12, 5.56, 325.556]\n    return c[1] * params.C1 + c[2] * params.C1 * params.C2+ c[3] * params.C2\nend\n\nfunction xsec2(params)\n    coeffs = [2.12, 4.3, 12.6]\n    return myfunc(params, coeffs)\nend\n\nfunction myfunc(params, c)\n    return c[1] * params.C1 + c[2] * params.C1 * params.C2+ c[3] * params.C2\nend","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"If your observable is a distribution, you can define a vector of functions with one function for each bin of the distribution. (You could also treat each bin as a separate observable as shown above.)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"function diff_xsec_bin1(params)\n    coeffs = [2.2, 5.5, 6.6]\n    return myfunc(params, coeffs)\nend\n\nfunction diff_xsec_bin2(params)\n    coeffs = [3.3, 4.8, 7.6]\n    return myfunc(params, coeffs)\nend\n\nfunction diff_xsec_bin3(params)\n    coeffs = [4.9, 5.6, 8.9]\n    return myfunc(params, coeffs)\nend\n\ndiff_xsec = [diff_xsec_bin1, diff_xsec_bin2, diff_xsec_bin3]","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Note: Another way to define a vector of functions for the bins of distributions is shown here in the advanced tutorial. This can be particularly useful when the predictions for the individual bins have a similar functional relation and only differ in terms of some coefficients, as it is the case here in this example.","category":"page"},{"location":"tutorial/#Measurements-1","page":"Tutorial","title":"Measurements","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"We can now enter measurements of the observables. This is done by defining a NamedTuple consisting of Measurement and MeasurementDistribution objects.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"A Measurement consists of the observable, the measured numerical value and numerical values for the (multiple types of) uncertainties. The observable can be passed to the Measurement either as an Observable object or as a Function. When using the latter, the observable is assumed to be unconstrained. The uncertainties are passed as a NamedTuple. Each measurement has to provide uncertainty values for all of the (active) uncertainty types (see next section on Correlations). For a MeasurementDistribution, the corresponding inputs have to be passed as Vectors, where each element represents one bin of the distribution.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"A Measurement can be excluded from the model by setting the switch active=false. For a MeasurementDistribution, the keyword active accepts true or false to (de)activate the whole distribution or a vector of booleans for (de)activating only certain bins.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"measurements = (\n    Meas1 = Measurement(xsec1, 21.6, uncertainties = (stat=0.8, syst=1.8, another_unc=2.3),\n            active=true), # `active = false`: exclude measurement from fit (default: active = true)\n\n    Meas2 = Measurement(Observable(xsec2, min=0), 1.9,\n            uncertainties = (stat=0.6, syst=0.9, another_unc=1.1), active=true),\n\n    MeasDist = MeasurementDistribution(diff_xsec, [1.9, 2.93, 4.4],\n               uncertainties = (stat = [0.7, 1.1, 1.2], syst= [0.7, 0.8, 1.3], another_unc = [1.0, 1.2, 1.9]),\n               active=[true, false, true]), # `active = false`: exclude all bins from fit, `active = [true, true, false]`: exclude only third bin from fit\n)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Further information on the constructors see the API documentation of Measurement and MeasurementDistribution.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"note: Note\nWhen using only one measurement or only one type of uncertainties, make sure to insert a comma, like: uncertainties = (stat = 0.5,) so that Julia can parse the NamedTuple correctly!","category":"page"},{"location":"tutorial/#Correlations-1","page":"Tutorial","title":"Correlations","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"The correlations between the uncertainties of the measurements need to be provided for each of the uncertainty types. We can pass them by defining a NamedTuple of Correlation objects that contain the corresponding correlation matrices. The correlation matrix for each type of uncertainty needs to have a size of N times N, where N is the number of measurements, counting each bin of a distribution. When a certain type of uncertainty should not be considered, it can be deactivated by setting active = false. This means that the uncertainty values given in the corresponding Measurement and MeasurementDistribution objects will not be used.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"When assuming the uncertainties of all measurements are uncorrelated, you can use the NoCorrelation object for easily passing an identity matrix of the correct size.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"When using a large number of measurements, entering the correlation matrix becomes quite impractical, especially if you want to add further measurements later. With the function to_correlation_matrix, it is possible to enter a correlation matrix by simply specifying the names of the measurements that should be correlated and the value of the corresponding correlation coefficient. When using a MeasurementDistribution, the inter-bin correlations can also be entered by passing a matrix. By appending _binX to the name of a MeasurementDistribution, the Xth bin of the distribution can be accessed. Note: This function is evaluated from top to bottom, so if you overwrite a specific correlation value, the last value entered will be used.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"dist_corr = [1.0 0.5 0.0;\n             0.5 1.0 0.0;\n             0.0 0.0 1.0]\n\nanother_corr_matrix = to_correlation_matrix(measurements,\n    (:Meas1, :Meas2, 0.4), # correlate measurements :Meas1 and :Meas2 with a correlation coefficient of 0.4\n    (:Meas1, :MeasDist, 0.1), # correlate all bins of :MeasDist with :Meas1 with 0.1\n    (:MeasDist, :MeasDist, dist_corr), # correlate the bins of :MeasDist according to the matrix dist_corr\n    (:MeasDist_bin2, :MeasDist_bin3, 0.3), # correlate bin2 of :MeasDist with bin3 with 0.3 (overwrites the corresponding element set in the previous line, but ignored in fit since MeasDist_bin2 is inactive)\n)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"correlations = (\n    stat = NoCorrelation(active=true), # will use the identity matrix of the correct size\n\n    syst = Correlation([1.0 0.5 0.3 0.2 0.2;\n                        0.5 1.0 0.2 0.2 0.2;\n                        0.3 0.2 1.0 0.2 0.2;\n                        0.2 0.2 0.2 1.0 0.2;\n                        0.2 0.2 0.2 0.2 1.0], active=false), # `active = false`: ignore all uncertainty values and correlations for this type of uncertainty\n\n    another_unc = Correlation(another_corr_matrix, active=true)\n)","category":"page"},{"location":"tutorial/#File-\"runTutorial.jl\"-1","page":"Tutorial","title":"File \"runTutorial.jl\"","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Here, we create the EFTfitterModel from our inputs and run the actual analysis.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"First, we need to setup EFTfitter, BAT and some other Julia packages:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"using EFTfitter\nusing BAT            # for sampling\nusing IntervalSets   # for specifying the prior\nusing Distributions  # for specifying the prior\nusing Plots # for plotting","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"We can then build the EFTfitterModel which combines all our inputs into one object that is then used to perform the analysis on.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"model = EFTfitterModel(parameters, measurements, correlations)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"To sample the posterior distribution, we specify that our EFTfitterModel should be used and then setup BAT.jl to sample the EFTfitter likelihood.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"posterior = PosteriorDensity(model)\n\nalgorithm = MCMCSampling(mcalg = MetropolisHastings(), nsteps = 10^5, nchains = 4)\nsamples = bat_sample(posterior, algorithm).result;","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"For further information on settings & algorithms when sampling with BAT.jl see the BAT.jl tutorial and documentation.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"We can then inspect the results of the sampling using BAT.jl's SampledDensity, giving a summary of the sampling and the results of the model parameters.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"sd = SampledDensity(posterior, samples)\ndisplay(sd)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"BAT.jl - SampledDensity\n──────────────────────────────\n\nSampling:\n─────────────────────────\ntotal number of samples:      103343\neffective number of samples: (C1 = 19897.99484950266, C2 = 18106.884734831812)\n\n\nParameter estimates:\n─────────────────────────\nnumber of free parameters: 2\n\nTable with 5 columns and 2 rows:\n     parameter  mean       std        global_mode  marginal_mode\n   ┌────────────────────────────────────────────────────────────\n 1 │ C1         0.864514   0.349673   0.821192     0.81\n 2 │ C2         0.0129843  0.0210368  0.0155112    0.0165\n\n\nCovariance matrix:\n─────────────────────────\n2×2 Named Array{Float64,2}\ncov ╲  │          C1           C2\n───────┼─────────────────────────\nC1     │    0.122271   -0.0070394\nC2     │  -0.0070394  0.000442548","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Information about the smallest 1d intervals containing p% proability can be obtained using the get_smallest_interval_edges function:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"intervals_1d_C1 = get_smallest_interval_edges(samples, :C1, 0.9, bins=200, atol=0.1)\nprintln(\"lower interval edges: $(intervals_1d_C1.lower)\")\nprintln(\"upper interval edges: $(intervals_1d_C1.upper)\")","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"The keyword atol controls the absolute tolerance for which intervals are joined together when they are seperated less than this value. This is particularly useful when a large number of bins is used.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Of course, plotting the resulting posterior distributions is also simple using Plots.jl and the BAT.jl plotting recipes:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"p = plot(samples)\nsavefig(p, \"plot.pdf\")","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"(Image: example plot)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"For information on how to customize plots of the samples, please see the BAT.jl plotting documentation and examples.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"p = plot(samples, 0.9)\nsavefig(p, \"plot_1d.pdf\")","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"(Image: example plot)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"For customizing the plots of the 1D intervals, also see the EFTfitter plotting documentation and tutorial.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"This page was generated using Literate.jl.","category":"page"}]
}
